// Создать консольное приложение "Быки и коровы".
// Причем компьютер может загадывать число, начинающееся с символа 0 (ноль).
// В классическом варианте игра рассчитана на двух игроков.
// Каждый из игроков задумывает и записывает тайное 4-значное число с неповторяющимися цифрами[1].
// Игрок, который начинает игру по жребию, делает первую попытку отгадать число.
// Попытка — это 4-значное число с неповторяющимися цифрами, сообщаемое противнику.
// Противник сообщает в ответ, сколько цифр угадано без совпадения с их позициями в тайном числе (то есть количество коров)
// и сколько угадано вплоть до позиции в тайном числе (то есть количество быков).

// Функция генерирует случайное четырехзначное число (строку)
fun compnumb(): String {
// Используются цифры от 0 до 9, с помощью shuffled, эти числа перемишиваются и затем берутся 4 первых и преобразуются в строку
    return (0..9).shuffled().take(4).joinToString("")
}

fun `count_Bul_&_Cow`(secret: String, Chislo: String): Pair<Int, Int> {
    // Подсчёт быков.
    // Метод zip принимает 2 строки и разбивает их на пары,
        // где первый элемент этой пары из secret, второй из chislo.
    // Далее сравниваеются числа из пары и если они равны,
        // то значение увеличивается(метод count) и так ещё 3 раза
    val bulls = secret.zip(Chislo).count { it.first == it.second }

    // Подсчёт коров.
    // С помощью метода filters происходит фильтрация строки secret по условиям:
    // 1 условие. Если в строке Chislo есть символ такой же как и в secret
    // 2 условие. Индекс строки Chislo не должен быть равен индексу строки secret
    // В переменную записывается количество с помощью метода lenght,
        // считая сколько в итоге получилось отфильтрованных значений
    val cows = secret.filter { Chislo.contains(it) && Chislo.indexOf(it) != secret.indexOf(it) }.length

    return bulls to cows
}



fun main() {
    println("Добро пожаловать в игру 'Быки и коровы'!")

    val secretNumber = compnumb()
    var attempts = 0

    println("Компьютер загадал тайное число. Попробуйте угадать!\n")

    while (true) {
        print("Введите 4-значное число: ")
        val Chislo = readLine()!!

        // Условие проверки правельности ввода чисел
        // 1. проверка на то что число состоит из 4 цифр
        // 2. проверка на то что все введеные символы являются цифрами, метод all обеспечивает проверку всех цифр,
            // isDigit возвращает true, если символ = числу, и false если нет
        // 3. используя метод toSet(), строка Chislo преобразуется в множество уникальных цифр "вытаскивая" от туда кол-во записей в множестве
            // и далее это сравнивается с длинной числа если все верно,
            // то программа продожится, если нет то попросит ввести корректное число
        if (Chislo.length != 4 || !Chislo.all { it.isDigit() } || Chislo.toSet().size != Chislo.length) {
            println("Пожалуйста, введите корректное 4-значное число, состоящее из разных цифр.")
            continue
        }

        attempts++

        val (bulls, cows) = `count_Bul_&_Cow`(secretNumber, Chislo)
        println("Результат попытки $attempts: $bulls бык(ов), $cows корова(ы)\n")

        if (bulls == 4) {
            println("Поздравляем! Вы угадали число $secretNumber за $attempts попыток.")
            break
        }
    }

    println("Игра завершена.")
}